CREATE DATABASE DB_HUY;

-- PRODUCTS
USE DB_HUY;
CREATE TABLE PRODUCTS (
	ID				INT AUTO_INCREMENT,
	SKU				VARCHAR(255),
	TITLE			VARCHAR(255) NOT NULL,
    PRICE			FLOAT,
    SALEPRICE		FLOAT,
    FEATUREDIMAGE	VARCHAR(255),
    DESCRIPT		VARCHAR(255),
    CREADTEDDATE	DATETIME,
    MODIFIEDDATE	DATETIME,
    CONSTRAINT PK_PRODUCTS PRIMARY KEY(ID)
);

INSERT INTO PRODUCTS 
	(SKU, 
	TITLE, 
	PRICE, 
	SALEPRICE, 
	FEATUREDIMAGE, 
	DESCRIPT, 
	CREADTEDDATE,
	MODIFIEDDATE) 
VALUES 
	('SKU001', 'Product 1', 22.99, 25.99, 'example.com/image1.jpg', 'This is the description of Product 1', '2023-05-30 10:15', '2023-05-30 11:15'),
	('SKU002', 'Product 2', 49.99, NULL, 'example.com/image4.jpg', 'This is the description of Product 2', '2023-05-30 9:45', '2023-05-30 11:00'),
    ('SKU003', 'Product 3', 14.99, 10.99, 'example.com/image1.jpg', 'This is the description of Product 3', '2023-05-30 12:00', '2023-05-30 14:20'),
    ('SKU004', 'Product 4', 99.99, 89.99, 'example.com/image1.jpg', 'This is the description of Product 4', '2023-05-30 15:30', '2023-05-30 16:45'),
    ('SKU005', 'Product 5', 19.99, NULL, 'example.com/image1.jpg', 'This is the description of Product 5', '2023-05-30 18:30', '2023-05-30 19:15');
    
-- GALLAREYS
USE DB_HUY;
CREATE TABLE GALLAREYS (
	ID						INT,
	GALLAREY		VARCHAR(255),
    CONSTRAINT PK_GALLAREYS PRIMARY KEY(ID, GALLAREY),
    CONSTRAINT FK_GALLAREYS FOREIGN KEY(ID) REFERENCES PRODUCTS(ID)
);

INSERT INTO GALLAREYS (ID, GALLAREY) 
VALUES 
	(1, 'example.com/image1.jpg'),
    (1, 'example.com/image2.jpg'),
    (1, 'example.com/image3.jpg'),
    (2, 'example.com/image4.jpg'),
    (2, 'example.com/image5.jpg'),
    (3, 'example.com/image6.jpg'),
    (3, 'example.com/image7.jpg'),
    (3, 'example.com/image8.jpg'),
    (4, 'example.com/image9.jpg'),
    (5, 'example.com/image10.jpg');
    
-- CATEGORYS
USE DB_HUY;
CREATE TABLE CATEGORYS (
	ID						INT,
	CATEGORY		VARCHAR(255),
    CONSTRAINT PK_GALLAREYS PRIMARY KEY(ID, CATEGORY),
    CONSTRAINT FK_CATEGORYS FOREIGN KEY(ID) REFERENCES PRODUCTS(ID)
);

INSERT INTO CATEGORYS (ID, CATEGORY) 
VALUES 
	(1, 'Electronics'),
    (1, 'Home'),
    (2, 'Clothing'),
    (2, 'Sports'),
    (2, 'Beauty'),
    (3, 'Beauty'),
    (4, 'Home'),
    (5, 'Sports');

-- TAGS
USE DB_HUY;
CREATE TABLE TAGS (
	ID				INT,
	TAG		VARCHAR(255),
    CONSTRAINT PK_TAGS PRIMARY KEY(ID, TAG),
	CONSTRAINT FK_TAGS FOREIGN KEY(ID) REFERENCES PRODUCTS(ID)
);

INSERT INTO TAGS (ID, TAG) 
VALUES 
	(1, 'New'),
    (1, 'Sale'),
    (1, 'Trend'),
    (2, 'New'),
    (2, 'Trend'),
    (3, 'Featured'),
    (3, 'Sale'),
    (4, 'Trend'),
    (4, 'Sale'),
    (5, 'Featured');

-- 1. query: create, update, delete products
-- create products

INSERT INTO PRODUCTS (
	SKU, 
	TITLE, 
	PRICE, 
	SALEPRICE, 
	FEATUREDIMAGE, 
	DESCRIPT, 
	CREADTEDDATE,
	MODIFIEDDATE
)
VALUES 
	('SKU006', 'Product 6', 22.99, 25.99, 'example.com/image123.jpg', 'This is the description of Product 6', '2023-06-01 10:15', '2023-06-01 11:15');
    
INSERT INTO GALLAREYS (ID, GALLAREY) 
VALUES 
	(6, 'example.com/image66.jpg'),
    (6, 'example.com/image67.jpg'),
    (6, 'example.com/image68.jpg');
    
INSERT INTO PRODUCTS (
	SKU, 
	TITLE, 
	PRICE, 
	SALEPRICE, 
	FEATUREDIMAGE, 
	DESCRIPT, 
	CREADTEDDATE,
	MODIFIEDDATE
)
VALUES 
	('SKU007', 'Product 7', 22.99, 25.99, 'example.com777.jpg', 'This is the description of Product 7', '2023-06-01 10:15', '2023-06-01 11:15');

-- SELECT LAST_INSERT_ID();

INSERT INTO GALLAREYS (ID, GALLAREY) 
VALUES 
	((SELECT LAST_INSERT_ID()), 'example.com/image78.jpg'),
    ((SELECT LAST_INSERT_ID()), 'example.com/image79.jpg');

INSERT INTO CATEGORYS (ID, CATEGORY) 
VALUES 
	((SELECT LAST_INSERT_ID()), 'Home'),
    ((SELECT LAST_INSERT_ID()), 'Sports'),
    ((SELECT LAST_INSERT_ID()), 'Beauty');

INSERT INTO TAGS (ID, TAG) 
VALUES 
	((SELECT LAST_INSERT_ID()), 'New'),
    ((SELECT LAST_INSERT_ID()), 'Trend');

-- ====================================================================================
-- 1. update products
-- vd: cập nhật gallarey của product 7: thêm mới img vào producT 7
SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7';
INSERT INTO GALLAREYS (ID, GALLAREY) 
VALUES 
	((SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7'), 'example.com/image77.jpg');
-- WHERE ID = (SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7')
-- SELECT * FROM GALLAREYS;

-- cập nhật 1 ảnh bất kỳ trong gallarey product 7: image79 -> image7977
-- SELECT GALLAREY FROM GALLAREYS
-- WHERE ID = (SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7') AND GALLAREY LIKE '%image79%';

UPDATE GALLAREYS 
SET GALLAREY = 'example.com/image797.jpg'
WHERE ID = (SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7') AND GALLAREY LIKE '%image79%';

-- xóa product 7:
-- xóa gallareys 7 
DELETE FROM GALLAREYS 
WHERE ID = (SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7');
-- xóa categorys 7
DELETE FROM CATEGORYS 
WHERE ID = (SELECT ID FROM PRODUCTS WHERE TITLE LIKE 'ProDuct 7');
-- xóa tags 7
DELETE FROM TAGS 
WHERE ID = (SELECT ID FROM PRODUCTS777 WHERE TITLE LIKE 'ProDuct 7');

DELETE FROM PRODUCTS 
WHERE TITLE LIKE 'ProDuct 7';

-- Lấy danh sách sản phẩm theo category/tag nào đó(có thể phân trang)
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, G.GALLAREY, P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE, T.TAG, C.CATEGORY
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
WHERE T.TAG LIKE 'sale';

SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, G.GALLAREY, P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE, T.TAG, C.CATEGORY
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
WHERE C.CATEGORY LIKE 'home'
LIMIT 5;



-- sắp xếp danh sách theo title, price, created date
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, G.GALLAREY, P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE, T.TAG, C.CATEGORY
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
ORDER BY P.TITLE;

SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, G.GALLAREY, P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE, T.TAG, C.CATEGORY
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
ORDER BY P.PRICE DESC;

SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, G.GALLAREY, P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE, T.TAG, C.CATEGORY
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
ORDER BY P.CREADTEDDATE DESC;

-- liệt kê các danh sách
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
       GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
       GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
GROUP BY P.ID;

-- tìm kiếm sản phẩm theo tên: có chữ 'pro' trong tên;
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
       GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
       GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
WHERE P.TITLE LIKE '%pro%'
GROUP BY P.ID;

-- Lấy danh sách sản phẩm theo category/tag nào đó(có thể phân trang)
-- lấy theo tag
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
		GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
		T.TAG
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
WHERE T.TAG LIKE 'SALE'
GROUP BY P.ID
LIMIT 2;

-- lấy theo category
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
		C.CATEGORY,
		GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
WHERE C.CATEGORY LIKE 'home'
GROUP BY P.ID
LIMIT 1;

-- sắp xếp danh sách theo title, price, created date
-- sắp xếp theo title:
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
       GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
       GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
GROUP BY P.ID
ORDER BY P.TITLE DESC;


-- sắp xếp theo price:
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
       GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
       GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
GROUP BY P.ID
ORDER BY P.PRICE DESC;


-- sắp xếp theo created date:
SELECT P.ID, P.SKU, P.TITLE, P.PRICE, P.SALEPRICE, P.FEATUREDIMAGE, 
		GROUP_CONCAT(DISTINCT G.GALLAREY SEPARATOR ', ') AS GALLAREYS,
		P.DESCRIPT, P.CREADTEDDATE, P.MODIFIEDDATE,
       GROUP_CONCAT(DISTINCT C.CATEGORY SEPARATOR ', ') AS CATEGORIES,
       GROUP_CONCAT(DISTINCT T.TAG SEPARATOR ', ') AS TAGS
FROM PRODUCTS 			AS P
INNER JOIN CATEGORYS 	AS C
INNER JOIN TAGS			AS T
INNER JOIN GALLAREYS	AS G
ON 
	P.ID = C.ID 
	AND P.ID = T.ID 
    AND P.ID = G.ID
GROUP BY P.ID
ORDER BY P.CREADTEDDATE DESC;
